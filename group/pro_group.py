from zlapi.models import Message, ThreadType
from PIL import Image, ImageDraw, ImageFont
from datetime import datetime
import io
import requests
import os
import tempfile

def fetch_image(url, timeout=60):
    """T·∫£i ·∫£nh t·ª´ url v·ªõi timeout"""
    try:
        r = requests.get(url, stream=True, timeout=timeout)
        r.raise_for_status()
        return Image.open(io.BytesIO(r.content)).convert("RGBA")
    except Exception as e:
        print(f"Fetch image l·ªói: {e}")
        return None

def draw_text_wrapped(draw, text, position, font, max_width, line_spacing=3, fill=(0,0,0)):
    """V·∫Ω text xu·ªëng d√≤ng khi v∆∞·ª£t qu√° max_width"""
    x, y = position
    words = text.split()
    lines = []
    line = ""
    for word in words:
        test_line = f"{line} {word}".strip()
        bbox = draw.textbbox((0, 0), test_line, font=font)
        width = bbox[2] - bbox[0]
        if width <= max_width:
            line = test_line
        else:
            if line: 
                lines.append(line)
            line = word
    if line:
        lines.append(line)

    for line in lines:
        draw.text((x, y), line, font=font, fill=fill)
        y += font.getbbox(line)[3] - font.getbbox(line)[1] + line_spacing

def handle_group_command(message, message_object, thread_id, thread_type, author_id, bot):
    try:
        group = bot.fetchGroupInfo(thread_id).gridInfoMap.get(thread_id)
        if not group:
            bot.replyMessage(Message(text="Kh√¥ng t√¨m th·∫•y th√¥ng tin nh√≥m!"), message_object, thread_id, thread_type)
            return

        avatar_url = group.fullAvt if group.fullAvt else None
        avatar_img = fetch_image(avatar_url) if avatar_url else None

        # TƒÉng k√≠ch th∆∞·ªõc ·∫£nh ƒë·ªÉ ch·ªØ tho·∫£i m√°i h∆°n
        width, height = 1100, 700  
        bg_color = (255, 255, 255)
        image = Image.new("RGBA", (width, height), bg_color)
        draw = ImageDraw.Draw(image)

        font_path = "BeVietnamPro-SemiBold.ttf"
        if not os.path.isfile(font_path):
            font_path = None
        font_title = ImageFont.truetype(font_path, 40) if font_path else ImageFont.load_default()
        font_text = ImageFont.truetype(font_path, 24) if font_path else ImageFont.load_default()

        padding = 30
        avatar_size = 180
        text_start_x = avatar_size + padding * 2
        current_y = padding - 10

        if avatar_img:
            avatar_img = avatar_img.resize((avatar_size, avatar_size))
            mask = Image.new("L", (avatar_size, avatar_size), 0)
            mask_draw = ImageDraw.Draw(mask)
            mask_draw.ellipse((0, 0, avatar_size, avatar_size), fill=255)
            image.paste(avatar_img, (padding, padding), mask)

        group_name = group.name or "Kh√¥ng t√™n"
        draw.text((text_start_x, current_y), group_name, font=font_title, fill=(30, 30, 30))
        current_y += font_title.getbbox(group_name)[3] - font_title.getbbox(group_name)[1] + 15

        desc = group.desc or "Kh√¥ng c√≥ m√¥ t·∫£"
        draw_text_wrapped(draw, f"M√¥ t·∫£: {desc}", (text_start_x, current_y), font_text, max_width=width - text_start_x - padding, fill=(70,70,70))
        current_y += (font_text.getbbox(desc)[3] - font_text.getbbox(desc)[1]) * (desc.count('\n')+1) + 40

        info_lines = []
        info_lines.append(f"ID nh√≥m: {group.groupId}")

        creator_name = "Kh√¥ng x√°c ƒë·ªãnh"
        try:
            creator_name = bot.fetchUserInfo(group.creatorId).changed_profiles[group.creatorId].zaloName
        except:
            pass
        info_lines.append(f"Tr∆∞·ªüng nh√≥m: {creator_name}")

        # B·ªè ph√≥ nh√≥m n√™n kh√¥ng l·∫•y adminIds

        info_lines.append(f"T·ªïng th√†nh vi√™n: {group.totalMember}")

        create_ts = group.createdTime
        try:
            create_time_str = datetime.fromtimestamp(create_ts / 1000).strftime("%H:%M %d/%m/%Y")
        except:
            create_time_str = "Kh√¥ng x√°c ƒë·ªãnh"
        info_lines.append(f"Th·ªùi gian t·∫°o: {create_time_str}")

        key_translation = {
            'blockName': 'Ch·∫∑n ƒë·ªïi t√™n & avatar nh√≥m',
            'signAdminMsg': 'Ghim tin nh·∫Øn t·ª´ ch·ªß/pho nh√≥m',
            'addMemberOnly': 'Ch·ªâ ch·ªß/ph√≥ th√™m th√†nh vi√™n',
            'setTopicOnly': 'Cho ph√©p members ghim tin nh·∫Øn, ghi ch√∫, b√¨nh ch·ªçn',
            'enableMsgHistory': 'B·∫≠t l·ªãch s·ª≠ tin nh·∫Øn',
            'lockCreatePost': 'Kh√≥a t·∫°o ghi ch√∫, nh·∫Øc h·∫πn',
            'lockCreatePoll': 'Kh√≥a t·∫°o cu·ªôc thƒÉm d√≤',
            'joinAppr': 'Ch·∫ø ƒë·ªô ph√™ duy·ªát th√†nh vi√™n',
            'bannFeature': 'T√≠nh nƒÉng c·∫•m',
            'dirtyMedia': 'N·ªôi dung nh·∫°y c·∫£m',
            'banDuration': 'Th·ªùi gian c·∫•m',
            'lockSendMsg': 'Kh√≥a g·ª≠i tin nh·∫Øn',
            'lockViewMember': 'Kh√≥a xem th√†nh vi√™n'
        }
        setting = getattr(group, "setting", {})
        setting_lines = []

        for key, label in key_translation.items():
            val = setting.get(key, 0)
            if val == 1:
                status_text = "B·∫≠t"
                status_color = (0, 150, 0)  # xanh l√°
            else:
                status_text = "T·∫Øt"
                status_color = (200, 0, 0)  # ƒë·ªè

            # V·∫Ω label
            draw.text((text_start_x, current_y), f"{label}: ", font=font_text, fill=(0,0,0))
            # V·∫Ω tr·∫°ng th√°i b·∫≠t/t·∫Øt s√°t b√™n
            label_bbox = draw.textbbox((text_start_x, current_y), f"{label}: ", font=font_text)
            status_x = label_bbox[2] + 5
            draw.text((status_x, current_y), status_text, font=font_text, fill=status_color)
            current_y += font_text.getbbox(label)[3] - font_text.getbbox(label)[1] + 8

        # L∆∞u ·∫£nh t·∫°m r·ªìi g·ª≠i
        with tempfile.NamedTemporaryFile(suffix=".jpg", delete=False) as tmp_file:
            image.convert("RGB").save(tmp_file.name, format="JPEG", quality=90)
            tmp_path = tmp_file.name

        bot.replyMessage(
            Message(text=f"üìÑ Th√¥ng tin nh√≥m: {group_name}"),
            message_object,
            thread_id=thread_id,
            thread_type=thread_type
        )

        bot.sendLocalImage(
            tmp_path,
            thread_id=thread_id,
            thread_type=thread_type
        )

        os.remove(tmp_path)

    except Exception as e:
        print(f"L·ªói x·ª≠ l√Ω l·ªánh nh√≥m: {e}")
        bot.replyMessage(Message(text="‚ùå L·ªói x·ª≠ l√Ω l·ªánh nh√≥m, th·ª≠ l·∫°i sau!"), message_object, thread_id, thread_type)
